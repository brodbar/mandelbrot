/*	Vector class where:
 *	Starting point is (0, 0)
 *	End point is (x, y)
 */
class Vector2 {
	constructor(x, y) {
		this.x = x;
		this.y = y;
	}

	//Normalize vector (Unit Vector)
	normalize() {
		const {x, y} = this;
		const len = Math.sqrt(x ** 2 + y ** 2);
		this.x /= len;
		this.y /= len;
		return this;
	}

	//Deep copy a vector
	copy() {
		return new Vector2(this.x, this.y);
	}

	//Distance between two points
	dist(vec) {
		const x = this.x - vec.x;
		const y = this.y - vec.y;
		return Math.sqrt(x ** 2 + y ** 2);
	}

	//Set vector to a new value
	set(x, y) {
		this.x = x;
		this.y = y;
	}
	
	//Calculate the angle of the vector
	heading() {
		return vectAnge(this.x, this.y);
	}
	
	//Substract the two vectors given and return a new {Vector2}
	sub(vec) {
		return new Vector2(this.x - vec.x, this.y - vec.y);
	}

	//Return the vector sum as {Vector2} of two vectors given
	add(vec) {
		return new Vector2(this.x + vec.x, this.y + vec.y);
	}
}

//Remap value to given range [start, end]
function map(value, from, to, start, end) {
	return (value - from) / (to - from) * (end - start) + start;
}

//Return mathematical angle of {Vector2}
function vectAngle(x, y) {
	return (Math.atan2(y, x) * 180 / Math.PI + 360) % 360;
}


/* Linear interpolation where:
 * 0 <= {step} <= 1
 */
function lerp(from, to, step) {
	if(step < 0)
		return from;
	if(step > 1)
		return to;
	return from + (to - from) * step;
}

export {map, Vector2, vectAngle, lerp};
